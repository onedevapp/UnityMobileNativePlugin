{
  "api/OneDevApp.EmailSharingData.html": {
    "href": "api/OneDevApp.EmailSharingData.html",
    "title": "Class EmailSharingData | Unity Mobile Native Plugin documentation",
    "keywords": "Class EmailSharingData EmailSharingData class model for sharing email content details Inheritance Object EmailSharingData Namespace : OneDevApp Assembly : cs.temp.dll.dll Syntax [Serializable] public class EmailSharingData Constructors EmailSharingData() Declaration public EmailSharingData() Fields emailBcc Declaration public string[] emailBcc Field Value Type Description String [] emailCc Declaration public string[] emailCc Field Value Type Description String [] emailTo Declaration public string[] emailTo Field Value Type Description String [] fileData Declaration public MultipleFilesData fileData Field Value Type Description MultipleFilesData isHtmlText Declaration public bool isHtmlText Field Value Type Description Boolean message Declaration public string message Field Value Type Description String subject Declaration public string subject Field Value Type Description String"
  },
  "api/OneDevApp.html": {
    "href": "api/OneDevApp.html",
    "title": "Namespace OneDevApp | Unity Mobile Native Plugin documentation",
    "keywords": "Namespace OneDevApp Classes EmailSharingData EmailSharingData class model for sharing email content details ImageData ImageData class model for sharing image details MobileNativeManager MobileNativeManager is a single intance class which calls Native Android APIs MultipleFilesData MultipleFilesData class model to share multiple image files Enums ImagePickerErrorCode Status of a error. ImagePickerType Image picker options InstallErrorCode Status of a error during update InstallStatus Status of a download / install. UpdateMode Update mode UpdateType Update type for playstore"
  },
  "api/OneDevApp.ImageData.html": {
    "href": "api/OneDevApp.ImageData.html",
    "title": "Class ImageData | Unity Mobile Native Plugin documentation",
    "keywords": "Class ImageData ImageData class model for sharing image details Inheritance Object ImageData Namespace : OneDevApp Assembly : cs.temp.dll.dll Syntax [Serializable] public class ImageData Fields errorCode Declaration public int errorCode Field Value Type Description Int32 height Declaration public int height Field Value Type Description Int32 imageBase64 Declaration public string imageBase64 Field Value Type Description String message Declaration public string message Field Value Type Description String path Declaration public string path Field Value Type Description String status Declaration public bool status Field Value Type Description Boolean uri Declaration public string uri Field Value Type Description String width Declaration public int width Field Value Type Description Int32"
  },
  "api/OneDevApp.ImagePickerErrorCode.html": {
    "href": "api/OneDevApp.ImagePickerErrorCode.html",
    "title": "Enum ImagePickerErrorCode | Unity Mobile Native Plugin documentation",
    "keywords": "Enum ImagePickerErrorCode Status of a error. Namespace : OneDevApp Assembly : cs.temp.dll.dll Syntax public enum ImagePickerErrorCode Fields Name Description ERROR_FILE_CANT_CREATE ERROR_FILE_NOT_READABLE ERROR_INTERNAL_ERROR ERROR_PERMISSION_FAILED"
  },
  "api/OneDevApp.ImagePickerType.html": {
    "href": "api/OneDevApp.ImagePickerType.html",
    "title": "Enum ImagePickerType | Unity Mobile Native Plugin documentation",
    "keywords": "Enum ImagePickerType Image picker options Namespace : OneDevApp Assembly : cs.temp.dll.dll Syntax public enum ImagePickerType Fields Name Description CAMERA CHOICE GALLERY"
  },
  "api/OneDevApp.InstallErrorCode.html": {
    "href": "api/OneDevApp.InstallErrorCode.html",
    "title": "Enum InstallErrorCode | Unity Mobile Native Plugin documentation",
    "keywords": "Enum InstallErrorCode Status of a error during update Namespace : OneDevApp Assembly : cs.temp.dll.dll Syntax public enum InstallErrorCode Fields Name Description ERROR_API_NOT_AVAILABLE ERROR_DOWNLOAD_NOT_PRESENT ERROR_INSTALL_IN_PROGRESS ERROR_INSTALL_NOT_ALLOWED ERROR_INSTALL_UNAVAILABLE ERROR_INTERNAL_ERROR ERROR_INVALID_REQUEST ERROR_LIBRARY ERROR_NETWORK ERROR_PLAY_STORE_NOT_FOUND ERROR_STORAGE_PERMISSION ERROR_UNKNOWN NO_ERROR"
  },
  "api/OneDevApp.InstallStatus.html": {
    "href": "api/OneDevApp.InstallStatus.html",
    "title": "Enum InstallStatus | Unity Mobile Native Plugin documentation",
    "keywords": "Enum InstallStatus Status of a download / install. Namespace : OneDevApp Assembly : cs.temp.dll.dll Syntax public enum InstallStatus Fields Name Description CANCELED DOWNLOADED DOWNLOADING FAILED INSTALLED INSTALLING PENDING UNKNOWN"
  },
  "api/OneDevApp.MobileNativeManager.html": {
    "href": "api/OneDevApp.MobileNativeManager.html",
    "title": "Class MobileNativeManager | Unity Mobile Native Plugin documentation",
    "keywords": "Class MobileNativeManager MobileNativeManager is a single intance class which calls Native Android APIs Inheritance Object MobileNativeManager Namespace : OneDevApp Assembly : cs.temp.dll.dll Syntax public class MobileNativeManager : MonoBehaviour Properties Instance Declaration public static MobileNativeManager Instance { get; } Property Value Type Description MobileNativeManager Methods CheckForUpdate(UpdateMode, UpdateType, String) Check for update and returns OnUpdateListener.onUpdateAvailable true or false Declaration public void CheckForUpdate(UpdateMode updateMode = UpdateMode.PLAY_STORE, UpdateType updateType = UpdateType.FLEXIBLE, string thirdPartyLink = \"\") Parameters Type Name Description UpdateMode updateMode update mode UpdateType updateType String thirdPartyLink CheckPermission(String) Check whether permission is granted or not Declaration public bool CheckPermission(string permission) Parameters Type Name Description String permission Returns Type Description Boolean Returns True if already permission granted for this permission else false. CheckPermissionRationale(String) Check whether permission permission can show rationale dialog Declaration public bool CheckPermissionRationale(string permission) Parameters Type Name Description String permission Returns Type Description Boolean Returns True if permission is requested but not granted and can show rationale dialog else false. CompleteUpdate() To complete the instalation of the update, you should call this function after OnUpdateListener.onUpdateInstallState(). This has no impact while using third party link update Declaration public void CompleteUpdate() ContinueUpdate() To continue update and must can called only on app onresume to complete the pending update of previous update Declaration public void ContinueUpdate() DismissProgressBar() Dismiss the progress bar Declaration public void DismissProgressBar() EnableLocation() Enable Location. Declaration public void EnableLocation() GetImageFromDevice(ImagePickerType, Int32, Int32, Int32) Get image from device via Camera or Gallery Declaration public void GetImageFromDevice(ImagePickerType pickerType = ImagePickerType.CHOICE, int maxWidth = 612, int maxHeight = 816, int quality = 80) Parameters Type Name Description ImagePickerType pickerType ImagePickerType of Choice or Camera or Gallery Int32 maxWidth image max width to compress Int32 maxHeight image max height to compress Int32 quality image quality from 1 to 100 IsDeviceRooted() Check whether device is rooted or not Declaration public bool IsDeviceRooted() Returns Type Description Boolean OnImagePickedResult(String) Declaration public void OnImagePickedResult(string param) Parameters Type Name Description String param OpenSettingScreen() Opens app settings page Declaration public void OpenSettingScreen() PluginDebug(Boolean) By default puglin console log will be diabled, but can be enabled Declaration public void PluginDebug(bool showLog = true) Parameters Type Name Description Boolean showLog If set true then log will be displayed else disabled RequestPermission(String) Check for permission and returns status in OnPermissionListener.onPermissionGranted() Declaration public void RequestPermission(string permission) Parameters Type Name Description String permission RequestPermission(String[]) Check for permission and returns status in OnPermissionListener.onPermissionGranted() Declaration public void RequestPermission(params string[] permissions) Parameters Type Name Description String [] permissions Array of requested permissions ShareFileContent(String, String, Boolean, String) Share Single File Declaration public void ShareFileContent(string message, string filePath = \"\", bool isFileUri = false, string header = \"\") Parameters Type Name Description String message message to be shared String filePath file path/ file Uri to be shared Boolean isFileUri bool which represent filepath is path or uri, if true then filePath takes as Uri String header share chooser header text ShareMultipleFileContent(String, MultipleFilesData, String) Share Multiple Files Declaration public void ShareMultipleFileContent(string message, MultipleFilesData fileData, string header = \"\") Parameters Type Name Description String message message to be shared MultipleFilesData fileData MultipleFilesData which holds array of file path and file Uri String header share chooser header text ShareOnMail(EmailSharingData, String) Share via Mail Declaration public void ShareOnMail(EmailSharingData emailData, string header = \"\") Parameters Type Name Description EmailSharingData emailData EmailSharingData which holds array of to, cc and bcc mail ids along with MultipleFilesData String header share chooser header text ShareOnWhatsApp(String, String, String, Boolean, String) Share on whatsapp Declaration public void ShareOnWhatsApp(string message, string mobileNo = \"\", string filePath = \"\", bool isFileUri = false, string header = \"\") Parameters Type Name Description String message message to be shared String mobileNo to share on specific phone no String filePath file path/ file Uri to be shared Boolean isFileUri bool which represent filepath is path or uri, if true then filePath takes as Uri String header share chooser header text ShareTextContent(String, String) Share Text Declaration public void ShareTextContent(string message, string header = \"\") Parameters Type Name Description String message message to be shared String header share chooser header text ShowAlertMessage(String, String, String) Shows alert dialog Declaration public void ShowAlertMessage(string title, string message, string positiveButtonName = \"OK\") Parameters Type Name Description String title Title. String message Message. String positiveButtonName Positive Button Name. ShowConfirmationMessage(String, String, String, String) Shows confirmation dialog Declaration public void ShowConfirmationMessage(string title, string message, string positiveButtonName = \"OK\", string negativeButtonName = \"Cancel\") Parameters Type Name Description String title Title. String message Message. String positiveButtonName Positive Button Name. String negativeButtonName Negative Button Name. ShowDatePicker() Shows the date picker dialog Declaration public void ShowDatePicker() ShowDatePicker(Int32, Int32, Int32) Shows the date picker dialog with requested date Declaration public void ShowDatePicker(int year, int month, int day) Parameters Type Name Description Int32 year Year. Int32 month Month. Int32 day Date. ShowProgressBar(String, String, Boolean) Shows the progress bar. Declaration public void ShowProgressBar(string title, string message, bool cancelable = true) Parameters Type Name Description String title Title. String message Message. Boolean cancelable If set true then on clicking outside disable ProgressBar ShowTimePicker() Shows the time picker dialog Declaration public void ShowTimePicker() ShowTimePicker(Int32, Int32, Boolean) Shows the time picker dialog with requested hour, mins and format Declaration public void ShowTimePicker(int hour, int minutes, bool is24HourFormat) Parameters Type Name Description Int32 hour Hour. Int32 minutes Mintues. Boolean is24HourFormat If set true then time picker dialog shows with 24 hours format else 12 hours ShowToast(String, Int32) Shows the toast. Declaration public void ShowToast(string message, int Length = 0) Parameters Type Name Description String message Message. Int32 Length Toast Duration, For Short 0,For Long 1. StartUpdate() To start the instalation of the update, you should call this function after OnUpdateListener.onUpdate(isUpdateAvailable, isUpdateTypeAllowed) and only if both isUpdateAvailable and isUpdateTypeAllowed are true Declaration public void StartUpdate() Events OnClickAction Event triggered when dialog buttons are clicked Declaration public static event Action<bool> OnClickAction Event Type Type Description Action < Boolean > OnImagePicked Event triggered with image picked Declaration public static event Action<ImageData> OnImagePicked Event Type Type Description Action < ImageData > OnImagePickedError Event triggered with image picked Declaration public static event Action<int, string> OnImagePickedError Event Type Type Description Action < Int32 , String > OnPermissionDenied Event triggered with permissions denied Declaration public static event Action<string[]> OnPermissionDenied Event Type Type Description Action < String []> OnPermissionError Event triggered with error when during permissions Declaration public static event Action<string> OnPermissionError Event Type Type Description Action < String > OnPermissionGranted Event triggered with permissions granted Declaration public static event Action<string[], bool> OnPermissionGranted Event Type Type Description Action < String [], Boolean > OnSelectedAction Event triggered with value when selected Declaration public static event Action<string> OnSelectedAction Event Type Type Description Action < String > OnUpdateAvailable Event triggered when the update is available or not Declaration public static event Action<bool> OnUpdateAvailable Event Type Type Description Action < Boolean > OnUpdateDownloading Event triggered with downloading value Declaration public static event Action<long, long> OnUpdateDownloading Event Type Type Description Action < Int64 , Int64 > OnUpdateError Event triggered with error during update Declaration public static event Action<int, string> OnUpdateError Event Type Type Description Action < Int32 , String > OnUpdateInstallState Event triggered with install state during update Declaration public static event Action<InstallStatus> OnUpdateInstallState Event Type Type Description Action < InstallStatus > OnUpdateStalenessDays Event triggered with staleness days available to download Declaration public static event Action<int> OnUpdateStalenessDays Event Type Type Description Action < Int32 > OnUpdateVersionCode Event triggered with version code available Declaration public static event Action<int> OnUpdateVersionCode Event Type Type Description Action < Int32 >"
  },
  "api/OneDevApp.MultipleFilesData.html": {
    "href": "api/OneDevApp.MultipleFilesData.html",
    "title": "Class MultipleFilesData | Unity Mobile Native Plugin documentation",
    "keywords": "Class MultipleFilesData MultipleFilesData class model to share multiple image files Inheritance Object MultipleFilesData Namespace : OneDevApp Assembly : cs.temp.dll.dll Syntax [Serializable] public class MultipleFilesData Constructors MultipleFilesData() Declaration public MultipleFilesData() Fields filePath Declaration public string[] filePath Field Value Type Description String [] fileUri Declaration public string[] fileUri Field Value Type Description String []"
  },
  "api/OneDevApp.UpdateMode.html": {
    "href": "api/OneDevApp.UpdateMode.html",
    "title": "Enum UpdateMode | Unity Mobile Native Plugin documentation",
    "keywords": "Enum UpdateMode Update mode Namespace : OneDevApp Assembly : cs.temp.dll.dll Syntax public enum UpdateMode Fields Name Description PLAY_STORE THIRD_PARTY"
  },
  "api/OneDevApp.UpdateType.html": {
    "href": "api/OneDevApp.UpdateType.html",
    "title": "Enum UpdateType | Unity Mobile Native Plugin documentation",
    "keywords": "Enum UpdateType Update type for playstore Namespace : OneDevApp Assembly : cs.temp.dll.dll Syntax public enum UpdateType Fields Name Description FLEXIBLE IMMEDIATE"
  },
  "index.html": {
    "href": "index.html",
    "title": "Unity Mobile Native Plugin | Unity Mobile Native Plugin documentation",
    "keywords": "Unity Mobile Native Plugin Native functions for Unity3D INSTALLATION There are 2 ways to install this plugin: import MobileNativePlugin_v1.0.unitypackage via Assets-Import Package clone/download this repository and move the Plugins folder to your Unity project's Assets folder Android Native Functions Requirements You project should build against Android 5.0 (API level 21) SDK at least. Runtime Permission works only with devices running Android 6.0 (API level 23) or higher. In-app updates works only with devices running Android 5.0 (API level 21) or higher. This plugin uses a custom tool for dependency management called the Play Services Resolver Before we start, there is one mandatory step: add the following line inside the <application>...</application> tag of Plugins/Android/AndroidManifest.xml: <meta-data android:name=\"com.google.android.gms.version\" android:value=\"@integer/google_play_services_version\" /> NOTE: According to the Unity3D docs here : AndroidManifest.xml file placed in the Assets->Plugins->Android folder (placing a custom manifest completely overrides the default Unity Android manifest). Or select an existing manifest from Project Settings->Publishing Settings->Build->Custom Main Manifest If your project doesn't have an AndroidManifest, you can copy Unity's default one from C:\\Program Files\\Unity\\Editor\\Data\\PlaybackEngines\\AndroidPlayer\\Apk . Or select from plugins \\Assets\\MobileNativePlugin\\Plugins\\Android Dialogs Show alert dialog with positive button MobileNativeManager.ShowAlertMessage(string title, string message, string positiveButtonName) Returns the Click Action true if positive button clicked //Register for action MobileNativeManager.OnClickAction += OnClickAction; private void OnClickAction(bool action) { Debug.Log(\"OnClickAction clicked:: \" + action); } Show alert dialog with both positive and negative button MobileNativeManager.ShowConfirmationMessage(string title, string message, string positiveButtonName, string negativeButtonName) Returns the Click Action true if positive button clicked or false if negative button cllicked //Register for action MobileNativeManager.OnClickAction += OnClickAction; private void OnClickAction(bool action) { Debug.Log(\"OnClickAction clicked:: \" + action); } Show the intermediate progress bar MobileNativeManager.ShowProgressBar(string title, string message, bool cancelable) Dismiss the progress bar C# MobileNativeManager.DismissProgressBar() Show the time picker dialog or with requested hour, mins and format C# MobileNativeManager.ShowTimePicker() or MobileNativeManager.ShowTimePicker(int hour, int minutes, bool is24HourFormat) Returns the selected time C# //Register for action MobileNativeManager.OnSelectedAction += OnSelectedAction; private void OnSelectedAction(string value) { Debug.Log(\"OnSelectedAction selected:: \" + value); } Show the date picker dialog or with requested date MobileNativeManager.ShowDatePicker() or MobileNativeManager.ShowDatePicker(int year, int month, int day) Returns the selected date C# //Register for action MobileNativeManager.OnSelectedAction += OnSelectedAction; private void OnSelectedAction(string value) { Debug.Log(\"OnSelectedAction selected:: \" + value); } Dialog Time Picker <img src=\"Images/dialog.png\" width=270 height=540> <img src=\"Images/time_picker.png\" width=270 height=540> Toast Show the toast. //Toast Duration: For Short 0,For Long 1. MobileNativeManager.ShowToast(string message, int Length) Toast <img src=\"Images/toast.png\" width=270 height=540> Location Add uses-permission to AndroidManifest C# <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" /> Enable location automatically C# MobileNativeManager.Instance.EnableLocation(); Enable Location <img src=\"Images/enable_location.png\" width=270 height=540> Options Check whether device is rooted or not C# (bool) MobileNativeManager.IsDeviceRooted() Opens app settings page C# MobileNativeManager.OpenSettingScreen() Runtime Permissions Check the status of a permission, request a set of permissions and get a callback with the result. Optional step: By default, Unity shows a permission dialog on startup to prevent plugins from crashing/malfunctioning. This can be disabled, if you want, but you must make sure to handle all the runtime permissions carefully in your app's lifecycle. To disable this dialog, add the following line inside the <application>...</application> tag of Plugins/Android/AndroidManifest.xml: <meta-data android:name=\"unityplayer.SkipPermissionsDialog\" android:value=\"true\" /> API Add uses-permission to AndroidManifest <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" /> Check whether permission is granted or not (bool) MobileNativeManager.CheckPermission(string permission) Check whether permission permission can show rationale dialog (bool) MobileNativeManager.CheckPermissionRationale(string permission) Request Permission Single permission MobileNativeManager.RequestPermission(string permission) Multiple permission MobileNativeManager.RequestPermission(params string[] permission) Callback //Register for action MobileNativeManager.OnPermissionGranted += OnPermissionGranted; MobileNativeManager.OnPermissionDenied += OnPermissionDenied; MobileNativeManager.OnPermissionError += OnPermissionError; // Invoked when atleast one permission got granted // grantedPermissions containes list of all permission where granted by user. // all will be true if no of requested and granted permission are equal private void OnPermissionGranted(string[] grantedPermissions, bool all) {} // Invoked when any permission got denied // deniedPermissions containes list of all permission where granted by user. private void OnPermissionDenied(string[] deniedPermissions) {} // Invoked when any occurs during request // Returns any error occured during the runtime requesting. private void OnPermissionError(string error) {} Permission Dialog Request Permission <img src=\"Images/permission_dialog.png\" width=270 height=540> <img src=\"Images/request_permission.png\" width=270 height=540> Sharing Content Share text content MobileNativeManager.Instance.ShareTextContent(string message, string header = \"\"); Share text with one file content //filePath can be any image file path in android or can also be file URI MobileNativeManager.Instance.ShareFileContent(string message, string filePath = \"\", bool isFileUri = false, string header = \"\"); Share multiple files //fileData which accepts array of file paths and file URI MobileNativeManager.Instance.ShareMultipleFileContent(string message, MultipleFilesData fileData, string header = \"\"); Share content on Emails //emailData which accepts array of emailTo, emailCc, emailBcc along with MultipleFilesData MobileNativeManager.Instance.ShareOnMail(EmailSharingData emailData, string header = \"\"); Share content on WhatsApp //WhatsApp share is similar to single file content share except its open WhatsApp directly and can also open specific WhatsApp provided MobileNativeManager.Instance.ShareOnWhatsApp(string message, string mobileNo = \"\", string filePath = \"\", bool isFileUri = false, string header = \"\") <table> <tr> <td>Share</td> </tr> <tr> <td><img src=\"Images/share_on_mail.png\" width=270 height=540></td> </tr> </table> Image Picker Camera / Gallery To get image from device via Camera or Gallery //Call all default values //pickerType = ImagePickerType.CHOICE //maxWidth = 612 //maxHeight = 816 //quality = 80 MobileNativeManager.Instance.GetImageFromDevice(); or //Calling required types //CHOICE = 0, CAMERA = 1, GALLERY = 2 MobileNativeManager.Instance.GetImageFromDevice(ImagePickerType pickerType = ImagePickerType.CHOICE, int maxWidth = 612, int maxHeight = 816, int quality = 80); Callbacks //Register for action MobileNativeManager.OnImagePicked += OnImagePicked; MobileNativeManager.OnImagePickedError += OnImagePickedError; Image picker choice Selected image from gallery <img src=\"Images/Image_picker_choice.png\" width=270 height=540> <img src=\"Images/Image_picker_gallery.png\" width=270 height=540> In App Update Now android application can be updated wihtout leaving the app, its works on both scenarios: Play Store Update Using External Link (Some app will not be available on playstore but still can be updated) Play Store In-App Update There are two update modes. Flexible (default) - Shows the user an upgrade dialog but performs the downloading of the update within the background. This means that the user can continue using our app whilst the update is being downloaded. When the update is downloaded asks the user confirmation to perform the install. Immediate - Will trigger a blocking UI until download and installation is finished. Restart is triggered automatically External Link In-App Update Downloads an apk from server and tries install it automatically, but requires storage and install packages permissions. API Add uses-permission to AndroidManifest <!-- Required for internet access --> <uses-permission android:name=\"android.permission.INTERNET\" /> <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" /> <uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\" /> <!-- Required for third party apk install --> <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" /> <uses-permission android:name=\"android.permission.DOWNLOAD_WITHOUT_NOTIFICATION\" /> <uses-permission android:name=\"android.permission.REQUEST_INSTALL_PACKAGES\" /> Check for update C# //UpdateMode can either play store or third party //PLAY_STORE = 0, THIRD_PARTY = 1 //UpdateType can either FLEXIBLE or Immediate and no use for Third party update //FLEXIBLE = 0, IMMEDIATE = 1 //thirdPartyLink, an external link which can download apk on the fly MobileNativeManager.CheckForUpdate(UpdateMode updateMode, UpdateType updateType, string thirdPartyLink = \"\") To start the instalation of the update C# //Sholud call only if isUpdateAvailable is true MobileNativeManager.StartUpdate() To complete the instalation of the update C# //Sholud call only if isUpdateAvailable is true //This has no impact while using third party link update MobileNativeManager.CompleteUpdate() To continue update C# //must can called only on app resume to complete the pending update of previous update //This has no impact while using third party link update MobileNativeManager.ContinueUpdate() Callbacks //Register for action MobileNativeManager.OnUpdateAvailable += OnUpdateAvailable; MobileNativeManager.OnUpdateVersionCode += OnUpdateVersionCode; MobileNativeManager.OnUpdateStalenessDays += OnUpdateStalenessDays; MobileNativeManager.OnUpdateInstallState += OnUpdateInstallState; MobileNativeManager.OnUpdateDownloading += OnUpdateDownloading; MobileNativeManager.OnUpdateError += OnUpdateError; //Invoked when Google Play Services returns a response private void OnUpdateAvailable(bool isUpdateAvailable) {} // Invoked when the update is available with version code private void OnUpdateVersionCode(int versionCode) {} // Invoked when the update is available with staleness days private void OnUpdateStalenessDays(int days) {} // Invoked when install status of the update private void OnUpdateInstallState(int state) {} // Invoked during downloading private void onUpdateDownloading(long bytesDownloaded, long bytesTotal) {} // Invoked when the update encounter error private void onUpdateError(int code, string error) {} //Error code returns during the update process //Playstore update error code ERROR_DOWNLOAD_NOT_PRESENT = -7, ERROR_API_NOT_AVAILABLE = -3, ERROR_INSTALL_IN_PROGRESS = -8, ERROR_INSTALL_NOT_ALLOWED = -6, ERROR_INSTALL_UNAVAILABLE = -5, ERROR_INTERNAL_ERROR = -100, ERROR_INVALID_REQUEST = -4, ERROR_PLAY_STORE_NOT_FOUND = -9, ERROR_UNKNOWN = -2, NO_ERROR = 0, ERROR_LIBRARY = -1, //External apk udpate error code ERROR_STORAGE_PERMISSION = -101, ERROR_NETWORK = -102 Check Update <img src=\"Images/check_update.png\" width=270 height=540> Note: You can decide which update should be forced by using either Firebase Remote Config or a Configuration file hosted on your server When using external links, OnUpdateAvailable returns true when storage and network available, so you must update apk from link only when version validation is done by using either Firebase Remote Config or a Configuration file hosted on your server Its mandatory to be called MobileNativeManager.Instance.CompleteUpdate() when download is completed Troubleshoot In-app updates works only with devices running Android 5.0 (API level 21) or higher. Testing this won’t work on a debug build. You would need a release build signed with the same key you use to sign your app before uploading to the Play Store. It would be a good time to use the internal testing track. In-app updates are available only to user accounts that own the app. So, make sure the account you’re using has downloaded your app from Google Play at least once before using the account to test in-app updates. Because Google Play can only update an app to a higher version code, make sure the app you are testing as a lower version code than the update version code. Make sure the account is eligible and the Google Play cache is up to date. To do so, while logged into the Google Play Store account on the test device, proceed as follows: Make sure you completely close the Google Play Store App . Open the Google Play Store app and go to the My Apps & Games tab. If the app you are testing doesn’t appear with an available update, check that you’ve properly set up your testing tracks Debug Toggle library logs C# //By default puglin console log will be diabled, but can be enabled MobileNativeManager.Instance.PluginDebug(bool showLog); 👐 Contributions Any contributions are welcome! Fork it Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create New Pull Request 📄 License ``` MIT License Copyright (c) 2020 Durga Chiranjeevi Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE"
  }
}